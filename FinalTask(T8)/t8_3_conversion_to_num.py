# 3. Создайте собственный класс-исключение, который должен проверять содержимое списка на наличие только чисел.
# Проверить работу исключения на реальном примере. Необходимо запрашивать у пользователя данные и заполнять список.
# Класс-исключение должен контролировать типы данных элементов списка.
# Примечание: длина списка не фиксирована. Элементы запрашиваются бесконечно,
# пока пользователь сам не остановит работу скрипта, введя, например, команду “stop”.
# При этом скрипт завершается, сформированный список выводится на экран.
# Подсказка: для данного задания примем, что пользователь может вводить только числа и строки.
# При вводе пользователем очередного элемента необходимо реализовать проверку типа элемента и вносить его в список,
# только если введено число.
# Класс-исключение должен не позволить пользователю ввести текст (не число) и отобразить соответствующее сообщение.
# При этом работа скрипта не должна завершаться.

class NotANumberError(Exception):
    def __init__(self, txt='Not A Number'):
        self.txt = txt


def my_int(in_string):
    if not curr_el.isdecimal():
        raise NotANumberError
    else:
        return int(in_string)


if __name__ == '__main__':
    res_lst = []
    while True:
        curr_el = input('Введите число или q для выхода \n> ')
        if curr_el == 'q':
            break
        try:
            my_int(curr_el)
        except NotANumberError:
            print('Необходимо ввести натуральное число или q для выхода')
        else:
            res_lst.append(int(curr_el))
            print(res_lst)
